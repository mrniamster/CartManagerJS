var cartmanager=function(){"use strict";return class{constructor(){this.cartUrl="/cart.js",this.cartAddUrl="/cart/add.js",this.cartUpdateUrl="/cart/update.js",this.cartChangeUrl="/cart/change.js",this.cartClearUrl="/cart/clear.js",this.cart}async getCart(){try{const t=await fetch(this.cartUrl,{method:"GET",headers:{"Content-Type":"application/json"}}),r=await t.json();return this.cart=r,r}catch(t){return console.error("Error fetching cart:",t),null}}async addItem(t,r=1,e={}){try{const a={id:t,quantity:r,properties:e},o=await fetch(this.cartAddUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({items:[a]})}),n=await o.json();return this.cart=n,console.log("Item added to cart:",n),n}catch(t){return console.error("Error adding item to cart:",t),null}}async removeItem(t){try{const r=!isNaN(t),e={updates:{}};if(r)e.updates[t]=0;else{const r=this.cart.items.find((r=>r.key===t));if(!r)return console.error("Cart item with key not found:",t),null;e.updates[r.id]=0}const a=await fetch(this.cartUpdateUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}),o=await a.json();return this.cart=o,console.log("Item removed from cart:",o),o}catch(t){return console.error("Error removing item from cart:",t),null}}async updateCartItem(t,r,e={}){if(!this.cart)return void console.error("Cart not fetched. Call fetchCart() first.");if(this.cart.items.find((r=>r.key===t||r.variant_id.toString()===t))){const a={updates:{}};if(void 0!==r&&(a.updates[t]=r),Object.keys(e).length>0){a.note_attributes=[];for(const t in e)a.note_attributes.push({name:t,value:e[t]})}try{const t=await fetch(this.cartUpdateUrl,{method:"POST",body:JSON.stringify(a),headers:{"Content-Type":"application/json"}}),r=await t.json();this.cart=r,console.log("Cart item updated:",r)}catch(t){throw console.error("Error updating cart:",t),t}}else console.error("Cart item with key or variantId not found:",t)}async patchCartItem(t,r,e=1,a={}){try{const o=this.cart.items.find((r=>r.key===t||r.variant_id.toString()===t)),n={id:r,quantity:e,properties:a};if(o){const r={updates:{[t]:e}};if(Object.keys(a).length>0){r.note_attributes=[];for(const t in a)r.note_attributes.push({name:t,value:a[t]})}const o=await fetch(this.cartUpdateUrl,{method:"POST",body:JSON.stringify(r),headers:{"Content-Type":"application/json"}}),n=await o.json();return this.cart=n,console.log("Cart item updated:",n),n}{const t=await fetch(this.cartUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({items:[n]})}),r=await t.json();return this.cart=r,console.log("Item added to cart:",r),r}}catch(t){return console.error("Error patching cart:",t),null}}async clearCart(){try{const t=await fetch(this.cartClearUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({updates:{}})}),r=await t.json();return this.cart=r,console.log("Cart cleared:",r),r}catch(t){return console.error("Error clearing cart:",t),null}}}}();
